const express = require("express");
const router = express.Router();
require("../db/conn");
const User = require("../models/userSchema");
const bcrypt = require("bcryptjs");
const { findOne } = require("../models/userSchema");
const jwt = require("jsonwebtoken"); // const middleware = (req,res,next)=>{console.log('i am middleware'); next();}
const cokiparser = require("cookie-parser");
const jobPost = require("../models/postSchema");
// const profile = require('../models/profileSchema');
const protect = require("../middleware/authMiddleware");
const multer = require("multer");
const upload = multer({ dest: "usrimg" });
//all done execution
//sgnup
router.post("/register",upload.single("userimg"), async (req, res) => {
  console.log("in register");
  const {
    email,
    password,
    cpassword,
    name,
    city,
    dob,
    address,
    phoneno,
    qualification,
  } = req.body;
  console.log("req.file.path before initialied", req.file.path);
  const userimg = req.file.path;
  console.log("postimg after", userimg);
  if (!email || !password || !cpassword || !name || !city || !dob || !address||!userimg) {
    return res.status(422).json({ error: "Please fill the required fields" });
  }
  try {
    const userExists = await User.findOne({ email: email });
    if (userExists) {
      return res.status(422).json({ error: "Email User already exists!" });
    } 
    else if (password != cpassword) {
      return res.status(422).json({ error: "passwords dont match!" });
    } 
    else {
      const user = new User({
        email,
        password,
        cpassword,
        name,
        userimg,
        city,
        dob,
        address,
        phoneno,
        qualification,
      }); //dbname:nameoffrontendField
      //pre middleware for password hsshing will be called before save()
      user.token = await user.generateAuthToken();
      // user.userimg = "https://w7.pngwing.com/pngs/574/369/png-transparent-avatar-computer-icons-user-random-icons-purple-blue-heroes-thumbnail.png"
      await user.save();
      res.status(201).json({ message: "User registered successfully 🤎" });
      console.log("registered");
    }
  } catch (err) {
    console.log(err);
  }
});

//login

router.post("/login", async (req, res) => {
  try {
    // console.log(req.body);
    const { email, password } = req.body;
    if (!email || !password) {
      return res.status(400).json({ message: "please fill both credendials!" });
    }

    const userLogin = await User.findOne({ email: email }); //returns whole.left email isdb email
    //    console.log(userLogin);

    if (userLogin) {
      //if mail correct

      const isPassMatch = await bcrypt.compare(password, userLogin.password); //left db
      var token = userLogin.token;
      //  var token =await  userLogin.generateAuthToken();//return token generated by userscheme.method fnc
      // console.log(token);
      //   res.cookie("jwtoken", token,{             //nameof cokke and val of token
      //      expires:new Date(Date.now()+25892000000), httpOnly:true
      //      } );

      if (!isPassMatch) {
        res.json({ message: "invalid Credendial1s!" });
        console.log('invalid credentials')
      } //inval pass
      else {
        // console.log('token',token);
        console.log('login ok')
        res.json({
          message: "Login Successful ✅ ",
          token: token,
          //  ,user: userLogin// to return whole user //  secetkey:process.env.SECRET_KEY
        });
      }
    } else {
      res.json({ message: "Invalid Credentials!" }); //invalid email
      console.log("invalid email")
    }
  } catch (error) {
    console.log(error);
  }
});

//settings
//

router.post("/settings/changepass", protect, async (req, res) => {
  console.log("in the settinngs");
  const { email, oldpass, newpass, cfmpass } = req.body;
  if (!oldpass || !newpass || !cfmpass) {
    return res.status(400).json({ message: "please fill credendials!" });
  }

  try {
    const user = await User.findOne({ email: req.user.email });
    if (user) {
      console.log("i am the user", user);
      const PassMatch = await bcrypt.compare(oldpass, user.password);
      if (PassMatch) {
        console.log("inside match password");
        if (newpass != cfmpass) {
          console.log("checking new passes");
          return res
            .status(422)
            .json({ error: " New Passwords don't match ❗" });
        } else {
          user.set({ password: newpass });
          await user.save();
          return res
            .status(200)
            .json({ message: "Password Changed Successfully✅" });
        }
      } else {
        console.log("pass old not match");
        return res.status(422).json({ error: "Invalid Credentials" });
      }
    } else {
      console.log("user with this email not found");
      return res
        .status(422)
        .json({ error: "User with this email was not found🚫" });
    }
  } catch (err) {
    console.log(err);
    return res.status(400).json({ message: "Error in changing Password" });
  }
});

// router.get('/settings',(req,res)=>{ res.send('change password');
// res.send('change email address');res.send('update my profile');});

router.get("/messages", (req, res) => {
  res.send("hello from messages");
});

// router.get('/signup',(req,res)=>{ res.send('hello from signup'); });
//  router.get('/login',middleware(),(req,res)=>{ res.send('hello from login'); });
// module.exports = router;
module.exports = router;

// User.findOne({email:email}).then((userExists)=> {
//     if (userExists){ return res.status(422).json({error:'Email already exists!'});
//                    }
//  const user = new User({name,password,cpassword,age,email,address,phoneno,experience,salary,description});//dbname:nameoffrontendField

//  user.save().then(()=>{
//     res.status(201).json({message:'User registered successfully'});
//  }).catch((err)=>{res.status(500).json({message:'registration failed'});})
